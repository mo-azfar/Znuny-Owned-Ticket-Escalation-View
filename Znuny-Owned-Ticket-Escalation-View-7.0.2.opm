<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>Znuny-Owned-Ticket-Escalation-View</Name>
    <Version>7.0.2</Version>
    <Vendor>mo-azfar</Vendor>
    <URL>https://github.com/mo-azfar</URL>
    <License>GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007</License>
    <ChangeLog Version="7.0.1">New package.</ChangeLog>
    <ChangeLog Date="2024-03-27 10:30:00 +0800" Version="7.0.2">Code tidied and compared to based files 7.0.15.</ChangeLog>
    <Description Lang="en">Show additional filter for owned ticket in ticket escalation view</Description>
    <Framework>7.0.x</Framework>
    <IntroInstall Lang="en" Title="Install Information" Type="pre">
        &lt;br/&gt;
        &lt;b&gt;WELCOME&lt;/b&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        You are about to install the package Znuny-Owned-Ticket-Escalation-View.Check &lt;a href='https://github.com/mo-azfar/Znuny-Owned-Ticket-Escalation-View' target='_blank'/&gt;README&lt;/a&gt;&lt;br/&gt;
        &lt;br/&gt;
        &lt;br/&gt;
        AgentTicketEscalationView.pm is based on Znuny 7.0.14. You may later need to update / patch it based on latest release of znuny.&lt;br/&gt;
        I will try to update it to match the latest release if there is a changes in the said files.&lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;
    </IntroInstall>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="pre">
        &lt;br/&gt;
        Changelog&lt;br/&gt;
        7.0.1 - New package.&lt;br/&gt;
        7.0.2 - Code tidied and compared to based files 7.0.15.&lt;br/&gt;
        &lt;br/&gt;&lt;br/&gt;
        ((enjoy))&lt;br/&gt;
        &lt;br/&gt;
    </IntroUpgrade>
    <BuildDate>2024-03-27 10:38:18</BuildDate>
    <BuildHost>app.wsl.my</BuildHost>
    <Filelist>
        <File Location="Custom/Kernel/Modules/AgentTicketEscalationView.pm" Permission="644" Encode="Base64"></File>
    </Filelist>
</otrs_package>